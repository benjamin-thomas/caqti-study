"use strict";(self.webpackChunkcaqti_study=self.webpackChunkcaqti_study||[]).push([[3163],{2089:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>s});var l=t(4848),i=t(8453);const r={},o="Lwt CLI app",c={id:"lwt-cli-app/README",title:"Lwt CLI app",description:"Now, that we have acquired enough knowledge, we will build the app mentioned in the main README. The user will generate CRUD queries via a CLI.",source:"@site/study/lwt-cli-app/README.md",sourceDirName:"lwt-cli-app",slug:"/lwt-cli-app/",permalink:"/caqti-study/study/lwt-cli-app/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Hello, World!",permalink:"/caqti-study/study/hello-world/"}},a={},s=[];function d(e){const n={blockquote:"blockquote",code:"code",h1:"h1",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h1,{id:"lwt-cli-app",children:"Lwt CLI app"}),"\n",(0,l.jsxs)(n.p,{children:["Now, that we have acquired enough knowledge, we will build the app mentioned in the main ",(0,l.jsx)(n.code,{children:"README"}),". The user will generate CRUD queries via a CLI."]}),"\n",(0,l.jsxs)(n.p,{children:["In the ",(0,l.jsx)(n.code,{children:"async"})," example, we saw that that ",(0,l.jsx)(n.code,{children:"map"})," = ",(0,l.jsx)(n.code,{children:"bind"})," + ",(0,l.jsx)(n.code,{children:"return"}),"."]}),"\n",(0,l.jsxs)(n.p,{children:["This general concept is also applicable to ",(0,l.jsx)(n.code,{children:"lwt"}),", so we will make use of it via the ",(0,l.jsx)(n.code,{children:"Lwt_result.Syntax"})," module:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"let*"})," stands for bind"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"let+"})," stands for map"]}),"\n"]}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:["NOTE: learning about ",(0,l.jsx)(n.code,{children:"async"})," isn't required to understand ",(0,l.jsx)(n.code,{children:"lwt"}),", but you may find value in playing with that example, to get the bigger picture."]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["Here's an example illustrating different syntax variations: we always return a ",(0,l.jsx)(n.code,{children:"result"})," wrapped in a ",(0,l.jsx)(n.code,{children:"lwt"})," promise."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ocaml",children:"module Init = Repo.Init\nmodule Author = Repo.Author\n\nopen Lwt_result.Syntax\n\nlet will_get_author_v1 () : ('author, 'error) result Lwt.t =\n  let* conn = Init.connect () in\n  let* author = Author.find_by_id conn 1 in\n  Lwt.return (Ok author)\n\nlet will_get_author_v2 () : ('author, 'error) result Lwt.t =\n  let* conn = Init.connect () in\n  let* author = Author.find_by_id conn 1 in\n  Lwt.return_ok author\n\nlet will_get_author_v3 () : ('author, 'error) result Lwt.t =\n  let* conn = Init.connect () in\n  Lwt.map (fun author -> author) (Author.find_by_id conn 1)\n\nlet will_get_author_v4 () : ('author, 'error) result Lwt.t =\n  let* conn = Init.connect () in\n  let+ author = Author.find_by_id conn 1 in\n  author\n\nlet will_get_author_v5 () : ('author, 'error) result Lwt.t =\n  let* conn = Init.connect () in\n  Author.find_by_id conn 1\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"cd ./05-lwt-cli-app\nPGHOST=localhost PGDATABASE=caqti_study PGPORT=5433 dune exec ./bin/simple.exe\nPGHOST=localhost PGDATABASE=caqti_study PGPORT=5433 dune runtest --watch\n"})}),"\n",(0,l.jsx)(n.p,{children:"As before, we can fully interact with our app via the REPL"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:'$ cd ./05-lwt-cli-app\n$ make -C .. db-reset && PGHOST=localhost PGDATABASE=caqti_study PGPORT=5433 dune utop\nutop # open Repo;;\nutop # let conn = Init.connect_exn ();;\nutop # Init.create_tables conn;;\nutop # Init.seed conn;;\nutop # Bibliography.ls conn;;\nutop # Author.insert conn { first_name = "John"; last_name = "Doe"; middle_name = None };;\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}}}]);