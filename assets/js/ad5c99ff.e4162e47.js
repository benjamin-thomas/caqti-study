"use strict";(self.webpackChunkcaqti_study=self.webpackChunkcaqti_study||[]).push([[5354],{2802:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>r,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=l(4848),a=l(8453);const o={},i="Hello, caqti-lwt!",s={id:"hello-caqti-lwt/README",title:"Hello, caqti-lwt!",description:"Now, we will talk to our database again with caqti, but in an asynchronous fashion via its lwt module.",source:"@site/study/hello-caqti-lwt/README.md",sourceDirName:"hello-caqti-lwt",slug:"/hello-caqti-lwt/",permalink:"/caqti-study/study/hello-caqti-lwt/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Hello, caqti-eio!",permalink:"/caqti-study/study/hello-caqti-eio/"},next:{title:"Hello, ppx_rapper!",permalink:"/caqti-study/study/hello-ppx_rapper/"}},r={},c=[{value:"Test via the REPL",id:"test-via-the-repl",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",mermaid:"mermaid",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"hello-caqti-lwt",children:"Hello, caqti-lwt!"}),"\n",(0,n.jsxs)(t.p,{children:["Now, we will talk to our database again with ",(0,n.jsx)(t.code,{children:"caqti"}),", but in an asynchronous fashion via its ",(0,n.jsx)(t.code,{children:"lwt"})," module."]}),"\n",(0,n.jsx)(t.p,{children:"Remember those monads?"}),"\n",(0,n.jsxs)(t.p,{children:['Whereas before we could "extract" the data out of the ',(0,n.jsx)(t.code,{children:"Option"})," type (which can be seen like a wrapper type), like so:"]}),"\n",(0,n.jsx)(t.mermaid,{value:"flowchart RL\n    Option --\x3e Data"}),"\n",(0,n.jsx)(t.p,{children:'Now, we will have to do the same, but we will have to "cross" 2 contexts to successfully extract our data, like so:'}),"\n",(0,n.jsx)(t.mermaid,{value:"flowchart RL\n    Lwt --\x3e Result\n    Result --\x3e Data"}),"\n",(0,n.jsx)(t.p,{children:'To make things easier to write and read, we will again use a "let operator", like so:'}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ocaml",children:"let ( let* ) = Lwt_result.bind\n"})}),"\n",(0,n.jsx)(t.p,{children:'This will allow us to successfully "cross" the 2 "monad" contexts, in one line of code (or short-circuit to a failure state).'}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"cd ./03-hello-caqti-lwt\nPGHOST=localhost PGDATABASE=caqti_study PGPORT=5433 dune exec ./bin/main.exe\nPGHOST=localhost PGDATABASE=caqti_study PGPORT=5433 dune runtest --watch\n"})}),"\n",(0,n.jsx)(t.h2,{id:"test-via-the-repl",children:"Test via the REPL"}),"\n",(0,n.jsxs)(t.p,{children:["NOTE: ",(0,n.jsx)(t.code,{children:"utop"})," can resolve promises automagically. Rather than using the ",(0,n.jsx)(t.code,{children:"resolve_ok_exn"})," helper, try to evaluate only the promise at the prompt."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"$ PGHOST=localhost PGDATABASE=caqti_study PGPORT=5433 dune utop\n"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ocaml",children:"# open Repo;;\n# let conn = Init.connect_exn ();;\nval conn : Caqti_lwt.connection = <module>\n# let promise = Exec.add conn 1 2;;\nval promise : (int, [> Caqti_error.call_or_retrieve ]) result Lwt.t = <abstr>\n"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ocaml",children:"# open Repo;;\n# let conn = Init.connect_exn ();;\nval conn : Caqti_lwt.connection = <module>\n# let promise_add = Exec.add conn 1 2;;\nval promise_add : (int, [> Caqti_error.call_or_retrieve ]) result Lwt.t =\n  <abstr>\n# Repo.Exec.resolve_ok_exn promise_add;;\n- : int = 3\n# let promise_mul = Exec.mul conn 3 4;;\nval promise_mul : (int, [> Caqti_error.call_or_retrieve ]) result Lwt.t =\n  <abstr>\n# Repo.Exec.resolve_ok_exn promise_mul;;\n- : int = 12\n"})})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}}}]);