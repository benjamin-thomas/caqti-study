"use strict";(self.webpackChunkcaqti_study=self.webpackChunkcaqti_study||[]).push([[1920],{1630:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>r});var i=t(4848),o=t(8453);const c={},l="Hello, caqti-eio!",s={id:"hello-caqti-eio/README",title:"Hello, caqti-eio!",description:"Let's look at eio!",source:"@site/study/hello-caqti-eio/README.md",sourceDirName:"hello-caqti-eio",slug:"/hello-caqti-eio/",permalink:"/caqti-study/study/hello-caqti-eio/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Hello, caqti-blocking!",permalink:"/caqti-study/study/hello-caqti-blocking/"},next:{title:"Hello, caqti-lwt!",permalink:"/caqti-study/study/hello-caqti-lwt/"}},a={},r=[{value:"Test via the REPL",id:"test-via-the-repl",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"hello-caqti-eio",children:"Hello, caqti-eio!"}),"\n",(0,i.jsxs)(n.p,{children:["Let's look at ",(0,i.jsx)(n.a,{href:"https://github.com/ocaml-multicore/eio",children:"eio"}),"!"]}),"\n",(0,i.jsx)(n.p,{children:'Instead of promises, we will instead use a "direct style" concurrency model.'}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"NOTE: OCaml v5 or greater is required."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"As always let's run our tests:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"cd ./hello-caqti-eio\nPGHOST=localhost PGDATABASE=caqti_study PGPORT=5433 dune exec ./bin/main.exe\nPGHOST=localhost PGDATABASE=caqti_study PGPORT=5433 dune runtest --watch\n"})}),"\n",(0,i.jsx)(n.h2,{id:"test-via-the-repl",children:"Test via the REPL"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"$ PGHOST=localhost PGDATABASE=caqti_study PGPORT=5433 dune utop\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Firstly, let's bring the ",(0,i.jsx)(n.code,{children:"Init"})," and ",(0,i.jsx)(n.code,{children:"Exec"})," modules into scope:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ocaml",children:"# open Repo\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Let's also define a variant of ",(0,i.jsx)(n.code,{children:"with_conn"})," which is fused with Eio_main.run, for convenience when using the toplevel."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ocaml",children:"# let run_with_conn f = Caqti_eio.or_fail @@ Eio_main.run @@ fun env -> Init.with_conn f ~stdenv:(env :> Caqti_eio.stdenv)\nval run_with_conn :\n  (Caqti_eio.connection ->\n   ('a,\n    [< Caqti_error.t\n     > `Connect_failed `Connect_rejected `Load_failed `Load_rejected\n       `Post_connect ])\n   result) ->\n  'a = <fun>\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["NOTE: we use the ",(0,i.jsx)(n.code,{children:":>"})," operator to force a type coercion between the more general ",(0,i.jsx)(n.code,{children:"Eio_unix.Stdenv.base"})," type, to the more specific (but still compatible) ",(0,i.jsx)(n.code,{children:"Caqti_eio.stdenv"})," type."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Now we can query the database!"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ocaml",children:"# run_with_conn @@ Exec.add 1 2;;\n- : int = 3\n"})}),"\n",(0,i.jsx)(n.p,{children:"Here's the fully expanded version for clarity:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ocaml",children:"# Caqti_eio.or_fail @@ Eio_main.run @@ fun env -> Init.with_conn ~stdenv:(env :> Caqti_eio.stdenv) @@ fun conn -> Exec.mul 3 4 conn;;\n- : int = 12\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);