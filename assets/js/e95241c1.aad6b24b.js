"use strict";(self.webpackChunkcaqti_study=self.webpackChunkcaqti_study||[]).push([[3949],{7531:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>r});var t=i(4848),l=i(8453);const o={},c="Hello, caqti-blocking!",a={id:"hello-caqti-blocking/README",title:"Hello, caqti-blocking!",description:'Now, we will talk to our database sequentially with caqti, via its "blocking" module.',source:"@site/study/hello-caqti-blocking/README.md",sourceDirName:"hello-caqti-blocking",slug:"/hello-caqti-blocking/",permalink:"/caqti-study/study/hello-caqti-blocking/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Hello, caqti-async!",permalink:"/caqti-study/study/hello-caqti-async/"},next:{title:"Hello, caqti-eio!",permalink:"/caqti-study/study/hello-caqti-eio/"}},s={},r=[{value:"A note on error handling",id:"a-note-on-error-handling",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"hello-caqti-blocking",children:"Hello, caqti-blocking!"}),"\n",(0,t.jsxs)(n.p,{children:["Now, we will talk to our database sequentially with ",(0,t.jsx)(n.code,{children:"caqti"}),', via its "blocking" module.']}),"\n",(0,t.jsx)(n.p,{children:"We will gain the following abilities:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"talk to our database via a REPL (calling into our lib)"}),"\n",(0,t.jsxs)(n.li,{children:["talk to our database via our application (",(0,t.jsx)(n.code,{children:"bin/main.ml"}),")"]}),"\n",(0,t.jsx)(n.li,{children:"validate that our code always works by implementing some tests"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["We introduce 2 functions inside the ",(0,t.jsx)(n.code,{children:"Init"})," module:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"connect ()"}),", which returns either a connection, or an error"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"connect_exn ()"})," which returns a connection and fails at runtime if something's wrong","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"we will use this function in the REPL sessions."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Have a look at the ",(0,t.jsx)(n.code,{children:"Exec"})," module for additional details regarding the proper usage of connections with Caqti."]}),"\n",(0,t.jsx)(n.p,{children:"NOTE:"}),"\n",(0,t.jsxs)(n.p,{children:["From now on, our library's name changes to ",(0,t.jsx)(n.code,{children:"repo"}),". This communicates the fact that its only job will be to talk to the database.\nWhile this library code could reside inside the ",(0,t.jsx)(n.code,{children:"lib/"})," folder itself, we will move it to ",(0,t.jsx)(n.code,{children:"lib/repo/"}),". This will make introducing new (internal) libraries easier, later."]}),"\n",(0,t.jsx)(n.p,{children:"The test folder will mirror this change."}),"\n",(0,t.jsx)(n.p,{children:"NOTE:"}),"\n",(0,t.jsxs)(n.p,{children:["We also introduce an ",(0,t.jsx)(n.code,{children:"init.mli"})," file. Any function listed in this file will be public/exported. The REPL wont't be able to call any private functions (good!)."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"cd ./02-hello-caqti-blocking\nPGHOST=localhost PGDATABASE=caqti_study PGPORT=5433 dune exec ./bin/main.exe\nPGHOST=localhost PGDATABASE=caqti_study PGPORT=5433 dune runtest --watch\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"$ PGHOST=localhost PGDATABASE=caqti_study PGPORT=5433 dune utop\nutop # open Repo;;\nutop # let conn = Init.connect_exn ();;\nval conn : (module Caqti_blocking.CONNECTION) = <module>\nutop # Exec.add conn 1 2;;\n- : (int, [> Caqti_error.call_or_retrieve ]) result = Ok 3\n"})}),"\n",(0,t.jsx)(n.h2,{id:"a-note-on-error-handling",children:"A note on error handling"}),"\n",(0,t.jsx)(n.p,{children:"Here, we introduce the concepts of monads."}),"\n",(0,t.jsx)(n.p,{children:"To make a long story short, monads allow us to reduce this kind of nesting:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ocaml",children:"let add a b c =\n  match a with\n  | None -> None\n  | Some x -> (\n      match b with\n      | None -> None\n      | Some y -> (\n          match c with\n          | None -> None\n          | Some z -> Some (x + y + z)))\n"})}),"\n",(0,t.jsxs)(n.p,{children:["To reduce repetition, we can defer to ",(0,t.jsx)(n.code,{children:"bind"}),' which encapsulates the pattern "stop on fail, otherwise continue".']}),"\n",(0,t.jsx)(n.p,{children:"It's a little bit like JavaScript's promises."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ocaml",children:"let add a b c =\n  Option.bind a (fun x ->\n    Option.bind b (fun y ->\n      Option.bind c (fun z ->\n        Some (x + y + z)\n      )\n    )\n  )\n"})}),"\n",(0,t.jsxs)(n.p,{children:["We can reduce the nesting further by assigning ",(0,t.jsx)(n.code,{children:"bind"})," to the ",(0,t.jsx)(n.code,{children:">>="})," operator:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ocaml",children:"let ( >>= ) = Option.bind\nlet add a b c =\n  a >>= fun x ->\n  b >>= fun y ->\n  c >>= fun z ->\n  Some(x + y +z )\n"})}),"\n",(0,t.jsx)(n.p,{children:'To make things read more naturally, we can also introduce a special "let operator". This is a more recent capability of OCaml and we will favor using this syntax.'}),"\n",(0,t.jsx)(n.p,{children:"This feature is a little similar in spirit to JavaScript's async syntax."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ocaml",children:"let ( let* ) = Option.bind\n\nlet add a b c =\n  let* x = a in\n  let* y = b in\n  let* z = c in\n  Some (x + y + z)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["We can apply this pattern to other types, such as ",(0,t.jsx)(n.code,{children:"Result"}),", but also ",(0,t.jsx)(n.code,{children:"Lwt"})," which we will talk about in the next example."]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);