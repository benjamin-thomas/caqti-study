"use strict";(self.webpackChunkcaqti_study=self.webpackChunkcaqti_study||[]).push([[683],{6179:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>u});var t=r(4848),l=r(8453);const s={},a="Hello, caqti-async!",c={id:"hello-caqti-async/README",title:"Hello, caqti-async!",description:"Let's have a look at Caqti's async module.",source:"@site/study/hello-caqti-async/README.md",sourceDirName:"hello-caqti-async",slug:"/hello-caqti-async/",permalink:"/caqti-study/study/hello-caqti-async/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Bikereg EIO",permalink:"/caqti-study/study/bikereg-eio/"},next:{title:"Hello, caqti-blocking!",permalink:"/caqti-study/study/hello-caqti-blocking/"}},i={},u=[];function o(e){const n={blockquote:"blockquote",code:"code",h1:"h1",li:"li",mermaid:"mermaid",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"hello-caqti-async",children:"Hello, caqti-async!"}),"\n",(0,t.jsxs)(n.p,{children:["Let's have a look at ",(0,t.jsx)(n.code,{children:"Caqti"}),"'s ",(0,t.jsx)(n.code,{children:"async"})," module."]}),"\n",(0,t.jsx)(n.p,{children:"Same as before, we'll have to cross 2 contexts:"}),"\n",(0,t.jsx)(n.mermaid,{value:"flowchart RL\n    Async --\x3e Result\n    Result --\x3e Data"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# Load the project\n$ PGHOST=localhost PGDATABASE=caqti_study PGPORT=5433 dune utop\n"})}),"\n",(0,t.jsxs)(n.p,{children:["While we could define a ",(0,t.jsx)(n.code,{children:"let operator"}),", as we did with ",(0,t.jsx)(n.code,{children:"lwt"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ocaml",children:"# open Async;;\n\n# let ( let* ) t f = Deferred.bind t ~f;;\nval ( let* ) : 'a Deferred.t -> ('a -> 'b Deferred.t) -> 'b Deferred.t =\n  <fun>\n\n# let future_work1 =\n    let* result = Deferred.return (Ok 1) in\n    Deferred.return result;;\nval future_work1 : (int, 'a) result Deferred.t = <abstr>\n\n# Thread_safe.block_on_async_exn @@ fun () -> future_work1;;\n- : (int, 'a) result = Ok 1\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"async"})," actually comes with 2 builtin syntaxes:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'"ppx" let-bindings'}),"\n",(0,t.jsx)(n.li,{children:"operators"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"A ppx basically is OCaml's way to do meta-programming."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"So instead we will use this syntax:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ocaml",children:"# #require \"ppx_let\";;\n\n# let future_work2 : (int, 'a) result Deferred.t =\n    let%bind result = Deferred.return (Ok 2) in\n    Deferred.return result;;\nval future_work2 : (int, 'a) result Deferred.t = <abstr>\n\n# Thread_safe.block_on_async_exn @@ fun () -> future_work2;;\n- : (int, 'a) result = Ok 2\n"})}),"\n",(0,t.jsx)(n.p,{children:"Or this syntax:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ocaml",children:"# #require \"core\";;\n# let future_work3 : (int, 'a) Result.t Deferred.t =\n    Deferred.return (Ok 3) >>=? fun number ->\n    Deferred.return (Ok number)\nval future_work3 : (int, 'a) result Deferred.t = <abstr>\n\n# Thread_safe.block_on_async_exn @@ fun () -> future_work3;;\n- : (int, 'a) result = Result.Ok 3\n"})}),"\n",(0,t.jsxs)(n.p,{children:["An important pattern to remember is that ",(0,t.jsx)(n.code,{children:"map"})," = ",(0,t.jsx)(n.code,{children:"bind"})," + ",(0,t.jsx)(n.code,{children:"return"}),", so we can simplify this further:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ocaml",children:"# let future_work4 : (int, 'a) Result.t Deferred.t =\n    let open Async.Deferred.Result.Let_syntax in\n    let%map number = Deferred.return (Ok 4) in\n    number\nval future_work4 : (int, 'a) result Deferred.t = <abstr>\n\n# Thread_safe.block_on_async_exn @@ fun () -> future_work4;;\n- : (int, 'a) result = Result.Ok 4\n\n\n# let future_work5 : (int, 'a) Result.t Deferred.t =\n    let open Async in\n    Deferred.return (Ok 5) >>|? fun number -> number\nval future_work5 : (int, 'a) result Deferred.t = <abstr>\n\n# Thread_safe.block_on_async_exn @@ fun () -> future_work5;;\n- : (int, 'a) result = Result.Ok 5\n"})}),"\n",(0,t.jsx)(n.p,{children:"See the tests for more details."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"cd ./04-hello-caqti-async\nPGHOST=localhost PGDATABASE=caqti_study PGPORT=5433 dune exec ./bin/main.exe\nPGHOST=localhost PGDATABASE=caqti_study PGPORT=5433 dune runtest --watch\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ocaml",children:"# open Repo;;\n# let conn = Init.connect_exn ();;\nval conn : (module Caqti_async.CONNECTION) = <module>\n\n# let future_add = Exec.mul conn 3 4;;\nval future_add : (int, [> Caqti_error.call_or_retrieve ]) result Deferred.t =\n  <abstr>\n\n# open Async;;\n# Thread_safe.block_on_async_exn @@ fun () -> future_add;;\n- : (int, [> Caqti_error.call_or_retrieve ]) result = Ok 12\n"})})]})}function d(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}}}]);